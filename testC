# -*- coding: utf-8 -*-
"""
Created on Thu Jul 30 20:12:22 2020

@author: lmq
"""

import pandas as pd
from sklearn.cluster import KMeans
from sklearn import preprocessing
import matplotlib.pyplot as plt
#数据加载
data = pd.read_csv("C:/Users/Administrator/Desktop/github代码/数据分析训练营-结营考试/数据分析训练营-结营考试/ProjectC/CarPrice_Assignment.csv")
#print(data.info(),data.head())
train_x = data[["symboling","fueltype","aspiration", "doornumber","carbody","drivewheel","enginelocation","wheelbase","carlength","carwidth","carheight","curbweight","enginetype","cylindernumber","enginesize","fuelsystem","boreratio","stroke","compressionratio","horsepower","peakrpm","citympg","highwaympg","price"]]

#字符串归一化
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
columns = ["fueltype","aspiration", "doornumber","carbody","drivewheel","enginelocation","enginetype","cylindernumber","fuelsystem"]
for column in columns:
    train_x[column] = le.fit_transform(train_x[column])
#print(train_x)
    

# 规范化到[0,1]空间
min_max_scaler=preprocessing.MinMaxScaler()
train_x=min_max_scaler.fit_transform(train_x)

#K-Means 手肘法：
# 统计不同K取值的误差平方和
sse = []
for k in range(1, 20):
 	# kmeans算法
 	kmeans = KMeans(n_clusters=k)
 	kmeans.fit(train_x)
 	# 计算inertia簇内误差平方和
 	sse.append(kmeans.inertia_)
x = range(1,20)
plt.xlabel('K')
plt.ylabel('SSE')
plt.plot(x, sse, 'o-')
plt.show()

#对数值进行聚类,最优n_clusters=10
kmeans = KMeans(n_clusters=10)
#训练
kmeans.fit(train_x)
#预测
predict_y = kmeans.predict(train_x)
#合并聚类结果插入到原始数据中
result = pd.concat((data,pd.DataFrame(predict_y)),axis = 1)
result.rename({0:u"聚类结果"},axis = 1,inplace =True)
#volkswagen所在的聚类
re = result.loc[data['CarName'].str.contains("volkswagen")]
#print(re)
re1=list(set(re["聚类结果"]))
print("vw竞品聚类为：",re1)

